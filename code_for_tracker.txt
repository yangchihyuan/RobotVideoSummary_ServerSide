    // declares all required variables
    Rect2d roi;
    // create a tracker object
    //Ptr<Tracker> tracker = TrackerMOSSE::create();
    //Ptr<Tracker> tracker = TrackerTLD::create();
    Ptr<Tracker> tracker;


                std::string str_timestamp_initialize_tracker;
                if( poses.size() == 1)
                {
                    //set the tracking region as the face
                    HumanPose pose = poses.at(0);
                    auto keypoint_rightear = pose.keypoints.at(16); //right ear
                    auto keypoint_leftear = pose.keypoints.at(17); //left ear
                    if( keypoint_rightear.x >=0 && keypoint_rightear.y != -1 && keypoint_leftear.x >=0 && keypoint_leftear.y != -1 )
                    {
                        bool bTwoEarsSufficientlyApart = false;
                        if( keypoint_leftear.x - keypoint_rightear.x >= 20 )
                        {
                            bTwoEarsSufficientlyApart = true;
                            roi.width = keypoint_leftear.x - keypoint_rightear.x;
                            roi.x = keypoint_rightear.x;
                            roi.height = roi.width;
                            roi.y = keypoint_leftear.y - 0.5 *roi.width;
                        }
                        else if(keypoint_rightear.x - keypoint_leftear.x >= 20)
                        {
                            bTwoEarsSufficientlyApart = true;
                            roi.width = keypoint_rightear.x - keypoint_leftear.x;
                            roi.x = keypoint_leftear.x;
                            roi.height = roi.width;
                            roi.y = keypoint_rightear.y - 0.5 *roi.width;                        
                        }

                        if( bTwoEarsSufficientlyApart == true && roi.y >= 0)
                        {
                            tracker.reset();
                            tracker = TrackerGOTURN::create();
                            tracker->init(inputImage, roi);
                            rectangle(displayImage, roi, Scalar( 0, 255, 0 ), 2, 1 );     //green
                            str_timestamp_initialize_tracker = str_timestamp;
                            report_data.set_target_x(-1.0);
                            report_data.set_target_y(-1.0);
                        }
                    }
                }

                if(poses.size() == 0 && str_timestamp.compare(str_timestamp_initialize_tracker) != 0)
                {
                    bool ok = tracker->update(inputImage, roi);
                    if(ok)
                    {
                        if(FLAGS_Verbose)
                            cout << "Tracker x:" << roi.x << " y:" << roi.y << " width:" << roi.width << " height:" << roi.height << endl;
                        //how to let the robot to track the box? There is no openpose landmark locations. The robot need to take two different input format.
                        report_data.set_tracker_roi_x(roi.x);
                        report_data.set_tracker_roi_y(roi.y);
                        report_data.set_tracker_roi_width(roi.width);
                        report_data.set_tracker_roi_height(roi.height);

                        if( 0 <= roi.x && 0 <= roi.y && roi.x + roi.width <= inputImage.cols && roi.y + roi.height <= inputImage.rows )
                            rectangle(displayImage, roi, Scalar( 0, 0, 255 ), 2, 1 );     //red

                    }
                    else
                    {
                        if(FLAGS_Verbose)
                            cout << "Tracker not ok" << endl;
                    }
                    
                }
