    std::unique_ptr<tensorflow::Session> tf_session;

    //load the tensorflow model
    const string pathToGraph = "/4t/yangchihyuan/PSE_tfModels/model.ckpt-104801.meta";
    const string checkpointPath = "/4t/yangchihyuan/PSE_tfModels";    

    auto session = NewSession(SessionOptions());
    if (session == nullptr) {
        std::cout << "Could not create Tensorflow session." << std::endl;
        throw runtime_error("Could not create Tensorflow session.");
    }
    else
    {
        std::cout << "NewSession ok." << std::endl;
    }
    
    Status status;

    // Read in the protobuf graph we exported
    MetaGraphDef meta_graph_def;
    status = ReadBinaryProto(Env::Default(), pathToGraph, &meta_graph_def);
    if (!status.ok()) {
        std::cout << "Error reading graph definition from" << std::endl;
        throw runtime_error("Error reading graph definition from " + pathToGraph + ": " + status.ToString());
    }
    else
    {
        std::cout << "ReadBinaryProto ok." << std::endl;
    }

    // Add the graph to the session
    //status = session->Create(meta_graph_def.graph_def());
    status = session->Create(meta_graph_def.graph_def());
    if (!status.ok()) {
        throw runtime_error("Error creating graph: " + status.ToString());
    }
    else
    {
        std::cout << "Create session ok." << std::endl;
    }
    
    // Load weight
    Tensor checkpointPathTensor(DT_STRING, TensorShape());
    checkpointPathTensor.scalar<std::string>()() = checkpointPath;
    status = session->Run(
            {{ meta_graph_def.saver_def().filename_tensor_name(), checkpointPathTensor },},
            {},
            {meta_graph_def.saver_def().restore_op_name()},
            nullptr);
    if (!status.ok()) {
        std::cout << status.ToString() << std::endl;
    } else {
        std::cout << "Load Model "<<checkpointPath<<" successfully" << std::endl;
    }    
